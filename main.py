# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZlkmmKDaC6OzNhf1SSBx-hq5V19Of02i

Importing Libraries
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder,StandardScaler
from sklearn.linear_model import LinearRegression,Ridge,Lasso,ElasticNet
from sklearn.tree import DecisionTreeRegressor
import statsmodels.formula.api as smf
from sklearn.metrics import mean_squared_error,r2_score
from math import sqrt
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')
from matplotlib.axes._axes import _log as matplotlib_axes_logger
matplotlib_axes_logger.setLevel('ERROR')

"""Loading the data"""

df_house = pd.read_excel('1553768847_housing.xlsx')
df_house.head()

import math
print(math.log(452600))

from pandas.core.computation.pytables import Index
df_house.columns

"""**Hanldling the missing Values**"""

df_house.isnull().sum()

"""It is observed that there are 207 missing values in 'total_bedrooms' column. Replace the nell values with the mean."""

df_house.total_bedrooms=df_house.total_bedrooms.fillna(df_house.total_bedrooms.mean())
df_house.isnull().sum()

"""Converitng the categorical column in the dataset to numerical data"""

le = LabelEncoder()
df_house['ocean_proximity']=le.fit_transform(df_house['ocean_proximity'])

"""Standardising the training and test datasets"""

names=df_house.columns                                    #Column name first
scaler=StandardScaler()                                   #Creating Scale 
scaled_df=scaler.fit_transform(df_house)                  #Fitting data on Scaler object
scaled_df=pd.DataFrame(scaled_df, columns=names)
scaled_df.head()

"""Checking for linearity"""

#plot graphs
fig,axs=plt.subplots(1,3,sharey=True)
scaled_df.plot(kind='scatter',x='longitude',y='median_house_value',ax=axs[0],figsize=(16,8))
scaled_df.plot(kind='scatter',x='latitude',y='median_house_value',ax=axs[1],figsize=(16,8))
scaled_df.plot(kind='scatter',x='housing_median_age',y='median_house_value',ax=axs[2],figsize=(16,8))

#plot graphs
fig,axs=plt.subplots(1,3,sharey=True)
scaled_df.plot(kind='scatter',x='total_rooms',y='median_house_value',ax=axs[0],figsize=(16,8))
scaled_df.plot(kind='scatter',x='total_bedrooms',y='median_house_value',ax=axs[1],figsize=(16,8))
scaled_df.plot(kind='scatter',x='population',y='median_house_value',ax=axs[2],figsize=(16,8))

#plot graphs
fig,axs=plt.subplots(1,3,sharey=True)
scaled_df.plot(kind='scatter',x='households',y='median_house_value',ax=axs[0],figsize=(16,8))
scaled_df.plot(kind='scatter',x='median_income',y='median_house_value',ax=axs[1],figsize=(16,8))
scaled_df.plot(kind='scatter',x='ocean_proximity',y='median_house_value',ax=axs[2],figsize=(16,8))

"""Only median_income and median_house value have a linear relationship, according to the aforementioned graphs."""

for column in scaled_df:                       #Check for outliers
  plt.figure()
  sns.boxplot(x=scaled_df[column])

"""Extract the input (X) and output (Y) data from the dataset"""

X_Features=['longitude', 'latitude', 'housing_median_age', 'total_rooms',
       'total_bedrooms', 'population', 'households', 'median_income',
       'ocean_proximity']
X=scaled_df[X_Features]
Y=scaled_df['median_house_value']

print(type(X))
print(type(Y))

print(df_house.shape)
print(X.shape)
print(Y.shape)

"""Splitting the dataset into 80% training dataset and 20% test dataset"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.2,random_state=1)

print (x_train.shape, y_train.shape)
print (x_test.shape, y_test.shape)

"""### **Linear Regression** """

linreg=LinearRegression()
linreg.fit(x_train,y_train)
LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)
y_predict=linreg.predict(x_test)
print(sqrt(mean_squared_error(y_test, y_predict)))
print((r2_score(y_test, y_predict)))

"""## **Decision Tree Regression**"""

dtreg=DecisionTreeRegressor()
dtreg.fit(x_train,y_train)
y_predict=dtreg.predict(x_test)
print(sqrt(mean_squared_error(y_test,y_predict)))
print((r2_score(y_test,y_predict)))

"""## **Random Forest Regression**"""

from sklearn.ensemble import RandomForestRegressor
from sklearn.datasets import make_regression
rfreg=RandomForestRegressor()
rfreg.fit(x_train,y_train)
y_predict=rfreg.predict(x_test)
print(sqrt(mean_squared_error(y_test,y_predict)))
print(r2_score(y_test,y_predict))

"""## **Lasso Regression**"""

lassoreg=Lasso(alpha=0.001,normalize=True)
lassoreg.fit(x_train,y_train)
print(sqrt(mean_squared_error(y_test,lassoreg.predict(x_test))))
print('R2 coefficient of determination:{}'.format(lassoreg.score(x_test,y_test)))

"""## **Ridge Regression**"""

ridgereg=Ridge(alpha=0.001,normalize=True)
ridgereg.fit(x_train,y_train)
print(sqrt(mean_squared_error(y_test,ridgereg.predict(x_test))))
print('R2 coefficient of determinatio:{}'.format(ridgereg.score(x_test,y_test)))

"""## **ElasticNet Regression**"""

from sklearn.linear_model import ElasticNet
elasticreg=ElasticNet(alpha=0.001,normalize=True)
elasticreg.fit(x_train,y_train)
print(sqrt(mean_squared_error(y_test,elasticreg.predict(x_test))))
print('R2 coefficient of etermination:{}'.format(elasticreg.score(x_test,y_test)))

"""#**Hypothesis testing and value of P**"""

lm=smf.ols(formula='median_house_value ~ longitude+latitude+housing_median_age+total_rooms+total_bedrooms+population+households+median_income+ocean_proximity',data=scaled_df).fit()
lm.summary()

"""## **Linear Regression with one independent variable**"""

x_train_Income=x_train[['median_income']]
x_test_Income=x_test[['median_income']]
print(x_train_Income.shape)
print(y_train.shape)

"""Relation between features"""

linreg=LinearRegression()
linreg.fit(x_train_Income,y_train)
y_predict = linreg.predict(x_test_Income)
#print intercept and coefficient of the linear equation
print(linreg.intercept_, linreg.coef_)
print(sqrt(mean_squared_error(y_test,y_predict)))
print((r2_score(y_test,y_predict)))

"""Graphing least square line"""

scaled_df.plot(kind='scatter',x='median_income',y='median_house_value')
plt.plot(x_test_Income,y_predict,c='red',linewidth=2)

"""# **Hypothesis testig and value of P**"""

lm=smf.ols(formula='median_house_value ~ median_income',data=scaled_df).fit()
lm.summary()